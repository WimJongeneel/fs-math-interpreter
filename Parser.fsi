// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | INT of ( int32 )
  | LEFT_PARENTHES
  | RIGTH_PARENTHES
  | MINUS
  | PLUS
  | TIMES
  | DIVIDE
type tokenId = 
    | TOKEN_EOF
    | TOKEN_INT
    | TOKEN_LEFT_PARENTHES
    | TOKEN_RIGTH_PARENTHES
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_expression1
    | NONTERM_expression2
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( Expr ) 
