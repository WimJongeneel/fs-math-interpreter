%{

open Expression

%}

// The start token becomes a parser function in the compiled code:
%start start

// Regular tokens
%token LEFT_PARENTHES RIGTH_PARENTHES MINUS PLUS TIMES DIVIDE
%token < int32 > INT
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Expr > start

%%

// These are the rules of the grammar along with the F# code of the
// actions executed as rules are reduced.
start: expression EOF { $1 }

expression:
  | expression MINUS expression1                  { Minus ($1, $3) }
  | expression PLUS expression1                   { Plus ($1, $3) }
  | expression1                                   { $1 }

expression1:
  | expression1 TIMES expression2                 { Times ($1, $3) }
  | expression1 DIVIDE expression2                { Divide ($1, $3) }
  | expression2                                   { $1 }

expression2:
  | INT                                           { Int $1 }
  | LEFT_PARENTHES expression RIGTH_PARENTHES     { Parentheses $2 }
